{"version":3,"sources":["components/index.js","App.js","serviceWorker.js","index.js"],"names":["getAngle","fraction","factor","BaseHand","styled","div","_templateObject","ClockBase","_templateObject2","Center","_templateObject3","SecondHand","_templateObject4","props","MinuteHand","_templateObject5","HourHand","_templateObject6","App","state","seconds","minutes","hours","_this2","this","setInterval","date","Date","setState","getSeconds","getMinutes","getHours","_this$state","react_default","a","createElement","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"25CAEA,IAAMA,EAAW,SAACC,EAAUC,GAAX,OAAuB,IAAOD,EAAWC,GAEpDC,EAAWC,IAAOC,IAAVC,KAKDC,EAAYH,IAAOC,IAAVG,KAUTC,EAASL,IAAOC,IAAVK,KAaNC,EAAaP,YAAOD,EAAPC,CAAHQ,IAKD,SAAAC,GAAK,OAAIb,EAASa,EAAMZ,SAAU,IACxC,SAAAY,GAAK,OAAIA,EAAMZ,SAAW,GAAK,+BAGlCa,EAAaV,YAAOD,EAAPC,CAAHW,IAKD,SAAAF,GAAK,OAAIb,EAASa,EAAMZ,SAAU,KAG3Ce,EAAWZ,YAAOD,EAAPC,CAAHa,IAKC,SAAAJ,GAAK,OAAIb,EAASa,EAAMZ,SAAU,MCdzCiB,6MAnCbC,MAAQ,CACNC,QAAS,EACTC,QAAS,EACTC,MAAO,sFAGW,IAAAC,EAAAC,KAClBC,YAAY,WACV,IAAIC,EAAO,IAAIC,KACfJ,EAAKK,SAAS,iBAAO,CACnBR,QAASM,EAAKG,aACdR,QAASK,EAAKI,aACdR,MAAOI,EAAKK,WAAa,IAAM,OAEhC,sCAGI,IAAAC,EAKHR,KAAKL,MAHPC,EAFKY,EAELZ,QACAC,EAHKW,EAGLX,QACAC,EAJKU,EAILV,MAGF,OACEW,EAAAC,EAAAC,cAAC5B,EAAD,KACE0B,EAAAC,EAAAC,cAAC1B,EAAD,MACAwB,EAAAC,EAAAC,cAACxB,EAAD,CAAYV,SAAUmB,IACtBa,EAAAC,EAAAC,cAACrB,EAAD,CAAYb,SAAUoB,IACtBY,EAAAC,EAAAC,cAACnB,EAAD,CAAUf,SAAUqB,YA/BVc,mBCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6fc56831.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst getAngle = (fraction, factor) => (270 + (fraction * factor))\n\nconst BaseHand = styled.div`\n  position: absolute;\n\ttop: 50%;\n`\n\nexport const ClockBase = styled.div`\n  position: relative;\n  border: 10px solid orange;\n  width: 50vw;\n  height: 50vw;\n  margin: 0 auto;\n  background-color: black;\n  border-radius: 100%;\n`\n\nexport const Center = styled.div`\n  position: absolute;\n\ttop: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\twidth: 12px;\n\theight: 12px;\n\tborder: 2px solid #fff;\n\tbackground-color: orange;\n\tborder-radius: 100%;\n\tz-index: 100;\n`\n\nexport const SecondHand = styled(BaseHand)`\n\tleft: 40%;\n\toutline: 2px solid orange;\n\twidth: 59%;\n  transform-origin: 17%;\n  transform: rotate(${props => getAngle(props.fraction, 6)}deg);\n  transition: ${props => props.fraction > 0 && 'transform 0.5s ease-in-out'}\n`\n\nexport const MinuteHand = styled(BaseHand)`\n  left: 45%;\n\toutline: 2px solid #fff;\n\twidth: 45%;\n  transform-origin: 11%;\n  transform: rotate(${props => getAngle(props.fraction, 6)}deg)\n`\n\nexport const HourHand = styled(BaseHand)`\n\tleft: 45%;\n  outline: 2px solid #fff;\n\twidth: 35%;\n  transform-origin: 14%;\n  transform: rotate(${props => getAngle(props.fraction, 30)}deg)\n`\n","import React, { Component } from 'react';\nimport { ClockBase, Center, SecondHand, MinuteHand, HourHand } from './components'\n\nclass App extends Component {\n\n  state = {\n    seconds: 0,\n    minutes: 0,\n    hours: 0\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      let date = new Date();\n      this.setState(() => ({\n        seconds: date.getSeconds(),\n        minutes: date.getMinutes(),\n        hours: date.getHours() % 12 || 12\n      }))\n    }, 1000)\n  }\n\n  render() {\n    const {\n      seconds,\n      minutes,\n      hours,\n    } = this.state;\n\n    return (\n      <ClockBase>\n        <Center />\n        <SecondHand fraction={seconds} />\n        <MinuteHand fraction={minutes} />\n        <HourHand fraction={hours} />\n      </ClockBase>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}